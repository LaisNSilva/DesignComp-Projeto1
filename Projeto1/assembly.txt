INICIO: LDI, R1, $00; -- INICIO DO RELOGIO ZERANDO TODOS OS DISPLAYS E ALGUMAS VARIAVEIS. ALEM DISSO E ONDE O FPGA_RESET VEM
STA, R1, DSP0; -- zerando os displays
STA, R1, DSP1;
STA, R1, DSP2;
STA, R1, DSP3;
STA, R1, DSP4;
STA, R1, DSP5; -- fim de zerar displays
STA, R1, LED0_7; -- Apagando leds 0 a 7
STA, R1, LED9; -- Apagando led 9
STA, R1, MEM[09]; -- 
LDI, R2, $01; 
STA, R2, MEM[05]; -- Flag que comeca com 1 porque releogio comeca com 24hrs e nao AM_PM
LDI, R2, $04; 
STA, R2, MEM[06]; 
JMP, R1, .CONFIG; -- PULA PARA SUBROTINA DE INICIALIZACAO DE OUTRAS VARIAVEIS
COMECO: LDI, R1, $00;
STA, R1, MEM[00]; -- Carrega zero para a constante de 0
STA, R1, MEM[02];
LDI, R1, $01;
STA, R1, MEM[01]; -- Carrega um para a constante de 1
LACO_PRINCIPAL: NOP, R1, $00;
LDA, R1, KEY0; -- Verifica se KEY 0 foi pressionado 
CEQ, R1, MEM[00];
JEQ, R1, .CHECA_KEY1;  -- Se nao foi checa se KEY1 foi pressionado 
JSR, R1, .ALTERA_SEGUNDO;  -- Se foi vai pra alteração de segundos
CHECA_KEY1: NOP, R1, $00; 
LDA, R1, KEY1; -- Verifica se Key1 foi pressionado
CEQ, R1, MEM[00];
JEQ, R1, .CHECA_RESET; -- Se nao foi checa se FPGA_RESET foi pressionado 
JSR, R1, .CONFIGURA_RELEOGIO; -- Se foi vai pra configuração de relogio
CHECA_RESET: NOP, R1, $00;
LDA, R1, FPGA_RESET; -- Verifica se FPGA_RESET foi pressionado
CEQ, R1, MEM[00]; 
JEQ, R1, .VERIFICA_KEY3; -- Se nao foi checa se KEY3 foi pressionado 
JSR, R1, .INICIO;  -- Se foi vai pra inicio do codigo
VERIFICA_KEY3: NOP, R1, $00; 
LDA, R1, KEY3; -- Verifica se KEY3 foi pressionado
CEQ, R1, MEM[00];
JEQ, R1, .CHECA_KEY2; -- Se nao foi checa se KEY2 foi pressionado
JSR, R1, .MUDA_AM; -- Se foi vai pra alteração de modo AM_PM
CHECA_KEY2: NOP, R1, $00;
LDA, R0, SW9; -- Le os SW
LDA, R1, KEY2; -- Verifica se KEY2 foi pressionado
CEQ, R1, MEM[01]; 
JEQ, R1, .CONFIG_DESP;  -- Se foi vai pra configuracao de DISPLAY que impacta no alarme
LDA, R1, MEM[09];   -- Se nao foi checa se existe um alarme ou não
CEQ, R1, MEM[01];
JEQ, R1, .VERIFICA_DESP; -- Se existir vai pra parte de checar se display chegou no alarme ou nao
JMP, R1, .LACO_PRINCIPAL; -- Se nao, volta pro inicio laco principal
LIMPA_KEY1: STA, R1, LIMPA1; 
JMP, R1, .LACO_PRINCIPAL;  
NOP, R1, $00;
NOP, R1, $00; 
NOP, R1, $00; 
NOP, R1, $00; 
NOP, R1, $00;
NOP, R1, $00; 
NOP, R1, $00; 
NOP, R1, $00; 
NOP, R1, $00; 
NOP, R1, $00; 
NOP, R1, $00; 
NOP, R1, $00; 
NOP, R1, $00;
NOP, R1, $00; 
NOP, R1, $00; 
NOP, R1, $00; 
NOP, R1, $00; 
ALTERA_SEGUNDO: STA, R1, LIMPA0; -- limpa a leitura KEY0 (LIMPA0 = 511)
LDI, R3, $01; -- Passa 1 para o R3
CEQ, R3, MEM[03]; -- Compara se na MEM[03] tem 1
JEQ, R1, .LACO_PRINCIPAL; 
LDA, R1, MEM[02];
SOMA, R1, MEM[01];
STA, R1, MEM[02];  
JMP, R1, .ATUALIZA_UN_SEGUNDOS;
JUMP_PARA_RETORNO: JMP, R1, .CHECA_KEY1; -- retorna da subrotina (era um RET antes)
ATUALIZA_UN_SEGUNDOS: LDA, R2, MEM[52]; -- UNIDADES. SEGUNDOS. Passa valor atual de HEX0 para R2
SOMA, R2, MEM[01]; -- Soma 1 No MEM[01] tem 1
STA, R2, MEM[52]; -- Salva essa soma no MEM[52] memoria do HEX0
CEQ, R2, MEM[46]; -- Compara se esse valor é igual ao limite do HEX0
JEQ, R0, .ATUALIZA_DZ_SEGUNDOS; -- Se for igual, vai mexer na dezena 
LDA, R2, MEM[52]; -- Caso não seja, vai pegar esse valor...
STA, R2, DSP0; -- E vai passar para o HEX0
JMP, R2, .JUMP_PARA_RETORNO; -- E volta para continuar somando até dar o limite
ATUALIZA_DZ_SEGUNDOS: LDA, R2, MEM[00]; -- DEZENAS. SEGUNDOS. Salva 0 no R2
STA, R2, MEM[52]; -- Salva esse valor no MEM[52] memória do HEX0
STA, R2, DSP0; -- Passa 0 para o HEX0. Como ele passou do limite agora vai ser 0
LDA, R2, MEM[53]; -- Agora o mesmo esquema de cima. Pega o valor atual do HEX1
SOMA, R2, MEM[01]; -- Soma 1 no valor atual
STA, R2, MEM[53]; -- Manda esse valor para o MEM[53]
CEQ, R2, MEM[47]; -- Compara se ele é igual ao limite
JEQ, R2, .ATUALIZA_UN_MIN; -- Caso seja, vai para a ATUALIZA_UN_MIN, que lida com o HEX2
LDA, R2, MEM[53]; -- Caso não seja, manda esse valor para o R2
STA, R2, DSP1; -- e passa esse valor para o HEX1
JMP, R1, .JUMP_PARA_RETORNO; -- e volta para continuar somando até dar o limite do HEX1
ATUALIZA_UN_MIN: LDA, R2, MEM[00]; -- Deu o limite do HEX1, vai passar 1 para ele
STA, R2, MEM[53];
STA, R2, DSP1; -- Passou 1 para HEX1
LDA, R2, MEM[54];-- Agora é o LOOP de somar 1 para o HEX2
SOMA, R2, MEM[01];
STA, R2, MEM[54];
CEQ, R2, MEM[48]; -- Vê se tá no limite do HEX2
JEQ, R2, .ATUALIZAR_DZ_MIN; -- Caso esteja, vai para a ATUALIZAR_DZ_MIN
LDA, R2, MEM[54];
STA, R2, DSP2;
JMP, R1, .JUMP_PARA_RETORNO;
ATUALIZAR_DZ_MIN: LDA, R2, MEM[00]; -- HEX2 passou do limite. Zera ele
STA, R2, MEM[54];
STA, R2, DSP2;
LDA, R2, MEM[55]; -- Agora vê o valor do HEX3. Soma e vê se tá no limite
SOMA, R2, MEM[01];
STA, R2, MEM[55];
CEQ, R2, MEM[49];
JEQ, R2, .ATUALIZA_UN_HORA; -- Se tá no limite, vai para ATUALIZA_UN_HORA 
LDA, R2, MEM[55];
STA, R2, DSP3;
JMP, R2, .JUMP_PARA_RETORNO;
ATUALIZA_UN_HORA: LDA, R2, MEM[00]; -- Se veio aqui, HEX3 passou do limite. Zera ele.
STA, R2, MEM[55];
STA, R2, DSP3;
LDA, R2, MEM[56]; -- Vê o valor do HEX4 e soma
SOMA, R2, MEM[01];
STA, R2, MEM[56];
CEQ, R2, MEM[50]; -- compara se essa soma tá no limite
JEQ, R2, .ATUALIZA_DZ_HORA; -- se tiver vai para a ATUALIZA_DZ_HORA tratar do HEX5
LDA, R2, MEM[56];
STA, R2, DSP4; -- Caso contrário passa a soma para o HEX4
JMP, R1, .JUMP_PARA_RETORNO;
ATUALIZA_DZ_HORA: LDA, R2, MEM[00]; -- Só vem aqui se HEX4 passou do limite. Zera ele.
STA, R2, MEM[56];
STA, R2, DSP4;
LDA, R2, MEM[57]; -- Trata o HEX5. Pega o valor atual e soma 1.
CEQ, R2, MEM[05]; -- compara com seu limite
JEQ, R0, .ATUALIZA_LIMITE_HEX4; -- Se o HEX5 tá do limite, vai na ATUALIZA_LIMITE_HEX4, que vai analisar o limite da HEX4
JMP, R0, .MUDA_HEX5;
ATUALIZA_LIMITE_HEX4: LDA, R0, MEM[06]; 
STA, R0, MEM[50];
NOP, R0, $00;
NOP, R0, $00;
MUDA_HEX5: LDA, R2, MEM[57];
SOMA, R2, MEM[01]; 
STA, R2, MEM[57];
CEQ, R2, MEM[51];
JEQ, R2, .ZERA_HEX5;
LDA, R2, MEM[57];
STA, R2, DSP5;
JMP, R1, .JUMP_PARA_RETORNO;
ZERA_HEX5: LDI, R2, $00;
STA, R2, MEM[57];
STA, R2, DSP5;  
LDI, R3, $01;   
STA, R3, MEM[03];
CONFIG: LDI, R3, $0A; -- Coloca o limite dos HEX 0 2 4 para 10
STA, R3, MEM[46];
STA, R3, MEM[48];
STA, R3, MEM[50]; -- Finalizacao de limite de HEX 0 2 4
LDI, R3, $06; -- Coloca o limite do HEX 1 e 3 como 6
STA, R3, MEM[47];
STA, R3, MEM[49];
LDI, R3, $01;
CEQ, R3, MEM[05]; -- Verifica se o relogio está no modo 24hrs ou AM PM
JEQ, R3, .VINTE_QUATRO_TA; -- Se tiver 24hrs vai pras configuracoes extras deste
JMP, R3, .AM_PM; -- Se tiver AM PM vai pras configuracoes extras deste
VINTE_QUATRO_TA: LDI, R3, $03;
STA, R3, MEM[51]; -- Como estamos no modo 24, o limite do HEX 5 tem que ser 3, ja que ele vai ate *2* 3 horas e 59 minutos e 59 segundos
LDI, R3, $00;
STA, R3, MEM[56]; -- Configura o valor do HEX 4 para 0, pra reiniciar
JMP, R3, .VOLTA;
AM_PM: LDI, R3, $02;
STA, R3, MEM[51]; -- Como estamos no modo AM PM, o limite do HEX 5 tem que ser 2, ja que ele vai ate *1* 2 horas e 59 minutos e 59 segundos
LDI, R3, $01;
STA, R3, MEM[56]; -- Configura o valor do HEX 4 para 0, pra reiniciar
STA, R3, DSP4; -- O relogio de am pm vai de 12 hrs ate 1 (12 AM - 1 PM)
VOLTA: LDI, R3, $00; -- Configura o valor inicial de todos os HEX como 0
STA, R3, MEM[52];
STA, R3, MEM[53];
STA, R3, MEM[54];
STA, R3, MEM[55];
STA, R3, MEM[57]; -- Fim da configuracao do valor inicial do HEX
NOP, R1, $00;
STA, R3, MEM[03];
JMP, R0, .COMECO; -- Volta para LACO princial, de onde parou
CONFIGURA_RELEOGIO: STA, R1, LIMPA1; -- limpa Key1
VERIFICA_PROXIMO_PAR_HEX: LDA, R1, KEY1; -- verifica se key1 foi pressionado para ir para proximo par de HEX
CEQ, R1, MEM[00];
JEQ, R1, .VERIFICA_KEY2; -- Se nao foi pressionado, verfica se key2 foi pressionado para aumentar o valor do HEX
JMP, R1, .MUDA_MINUTOS; -- Se foi pressionado, vai para proximo par de HEX
VERIFICA_KEY2: LDA, R1, KEY2;
CEQ, R1, MEM[00];
JEQ, R1, .VERIFICA_PROXIMO_PAR_HEX; -- Se KEY2 nao for pressionado volta para ver se key1 foi
JMP, R1, .AUMENTA_SEGUNDO; -- se key2 for pressinado tem que aumentar o valor do hex
AUMENTA_SEGUNDO: STA, R1, LIMPA2;
LDA, R2, MEM[52]; -- Pega valor de HEX 0    
SOMA, R2, MEM[01]; -- Soma 1
STA, R2, MEM[52]; -- Bota de volta no novo valor de HEX0 
CEQ, R2, MEM[46]; -- verifica se e igual ao limite
JEQ, R0, .CONFIG_ZERA_HEX0; -- se for igual ao limite vai pra atualizacao do valor de hex 0 
LDA, R2, MEM[52]; -- se nao for igual bota no valor do hex 0 e no hex 0 em si
STA, R2, DSP0;
JMP, R2, .VERIFICA_PROXIMO_PAR_HEX; -- como o valor nao e o limite, so e necessario volta pra checagem do key 1 para ver se esse botao ou key 2 foi pressionado de novo
CONFIG_ZERA_HEX0: LDA, R2, MEM[00]; 
STA, R2, MEM[52]; -- como chegou no limite o valor do hex 0 e o hex 0 em si precisam ser 0 
STA, R2, DSP0;
LDA, R2, MEM[53]; -- alem disso e necessario aumentar o proximo hex tambem
SOMA, R2, MEM[01]; 
STA, R2, MEM[53]; -- atuliza o novo valor do hex 1
CEQ, R2, MEM[47]; -- verifica se novo valor e o limite do hex 1
JEQ, R2, .CONFIG_ZERA_HEX1; -- se for o limite temos que zerar o hex 1
LDA, R2, MEM[53]; -- se nao for igual bota o novo valor no valor do hex 1 e no hex 1 em si
STA, R2, DSP1;
JMP, R1, .VERIFICA_PROXIMO_PAR_HEX; -- como o valor nao e o limite, so e necessario volta pra checagem do key 1 para ver se esse botao ou key 2 foi pressionado de novo
CONFIG_ZERA_HEX1: LDA, R2, MEM[00];
STA, R2, MEM[52]; -- mesma logica anterior olhar CONFIG_ZERA_HEX0 
STA, R2, DSP0;
STA, R2, MEM[53];
STA, R2, DSP1;
JMP, R1, .VERIFICA_PROXIMO_PAR_HEX; -- como a gente ta focado so nos segundos, voltamos para checagem se key 1 foi pressionado para saber se nos passamos para minutos
MUDA_MINUTOS: STA, R1, LIMPA1; -- limpa Key1
VERIFICA_MUDA_PAR_HEX: LDA, R1, KEY1; -- verifica se key1 foi pressionado para ir para proximo par de HEX
CEQ, R1, MEM[00]; 
JEQ, R1, .NMP_VER_KEY2; -- Se nao foi pressionado, verfica se key2 foi pressionado para aumentar o valor do HEX
JMP, R1, .MUDA_PAR_HEX; -- Se foi pressionado, vai para proximo par de HEX
NMP_VER_KEY2: LDA, R1, KEY2; 
CEQ, R1, MEM[00]; 
JEQ, R1, .VERIFICA_MUDA_PAR_HEX;  -- Se KEY2 nao for pressionado volta para ver se key1 foi
JMP, R1, .CFG_SOMA_HEX2;  -- se key2 for pressinado tem que aumentar o valor do hex
CFG_SOMA_HEX2: STA, R1, LIMPA2; 
LDA, R2, MEM[54]; -- Pega valor de HEX 2  
SOMA, R2, MEM[01]; -- Soma 1
STA, R2, MEM[54]; -- Bota de volta no novo valor de HEX2 
CEQ, R2, MEM[48]; -- verifica se e igual ao limite
JEQ, R2, .CONFIG_ZERA_HEX2; -- se for igual ao limite vai pra atualizacao do valor de hex 2 
LDA, R2, MEM[54]; -- se nao for igual bota no valor do hex 2 e no hex 2 em si
STA, R2, DSP2;
JMP, R1, .VERIFICA_MUDA_PAR_HEX; -- como o valor nao e o limite, so e necessario volta pra checagem do key 1 para ver se esse botao ou key 2 foi pressionado de novo
CONFIG_ZERA_HEX2: LDA, R2, MEM[00];
STA, R2, MEM[54]; -- como chegou no limite o valor do hex 2 e o hex 2 em si precisam ser 0 
STA, R2, DSP2; 
LDA, R2, MEM[55];  -- alem disso e necessario aumentar o proximo hex tambem
SOMA, R2, MEM[01];
STA, R2, MEM[55];  -- atuliza o novo valor do hex 3
CEQ, R2, MEM[49]; -- verifica se novo valor e o limite do hex 3
JEQ, R2, .CONFIG_ZERA_HEX3; -- se for o limite temos que zerar o hex 3
LDA, R2, MEM[55]; -- se nao for igual bota o novo valor no valor do hex 3 e no hex 3 em si
STA, R2, DSP3;
JMP, R1, .VERIFICA_MUDA_PAR_HEX; -- como o valor nao e o limite, so e necessario volta pra checagem do key 1 para ver se esse botao ou key 2 foi pressionado de novo
CONFIG_ZERA_HEX3: LDA, R2, MEM[00]; 
STA, R2, MEM[54]; -- mesma logica anterior olhar CONFIG_ZERA_HEX0
STA, R2, DSP2; 
STA, R2, MEM[55];
STA, R2, DSP3;
JMP, R1, .VERIFICA_MUDA_PAR_HEX; -- como a gente ta focado so nos minutos, voltamos para checagem se key 1 foi pressionado para saber se nos passamos para horas
MUDA_PAR_HEX: STA, R1, LIMPA1; -- limpa Key1
CGF_H_VERIF_KEY1: LDA, R1, KEY1; -- verifica se key1 foi pressionado para ir para proximo par de HEX
CEQ, R1, MEM[00];
JEQ, R1, .CGF_H_VERIF_KEY2;   -- Se nao foi pressionado, verfica se key2 foi pressionado para aumentar o valor do HEX
JMP, R1, .LIMPA_KEY1;  -- Se foi pressionado, vai para proximo par de HEX
CGF_H_VERIF_KEY2: LDA, R1, KEY2;
CEQ, R1, MEM[00];
JEQ, R1, .CGF_H_VERIF_KEY1;  -- Se KEY2 nao for pressionado volta para ver se key1 foi
JMP, R1, .CFG_H_APERTOU_KEY2; -- se key2 for pressinado tem que aumentar o valor do hex
CFG_H_APERTOU_KEY2: STA, R1, LIMPA2;
LDA, R2, MEM[56]; -- Pega valor de HEX 4  
SOMA, R2, MEM[01]; -- Soma 1
STA, R2, MEM[56]; -- Bota de volta no novo valor de HEX4 
CEQ, R2, MEM[50]; -- verifica se e igual ao limite
JEQ, R2, .CONFIG_ZERA_HEX4; -- se for igual ao limite vai pra atualizacao do valor de hex 4 
LDA, R2, MEM[56]; -- se nao for igual bota no valor do hex 4 e no hex 4 em si
STA, R2, DSP4;
JMP, R1, .CGF_H_VERIF_KEY1; -- como o valor nao e o limite, so e necessario volta pra checagem do key 1 para ver se esse botao ou key 2 foi pressionado de novo
CONFIG_ZERA_HEX4: LDA, R2, MEM[00];
STA, R2, MEM[56]; -- como chegou no limite o valor do hex 4 e o hex 4 em si precisam ser 0 
STA, R2, DSP4;
LDA, R2, MEM[57]; -- alem disso e necessario aumentar o proximo hex tambem
CEQ, R2, MEM[05]; -- nesse caso, antes de ver o limite do hex 4 tem que ver se estamos no am pm ou 24 hrs e isso se faz olhando se o hex 5 esta igual ou nao a flag
JEQ, R0, .RECONFIGURA_LIMITE_HEX4;  -- se for a flag eh porque chegamos no limite num anterior ao limite do hex portanto precisamos alterar o limte do hex 4
JMP, R0, .CFG_MUDA_HEX5; -- se nao for igual ao flag, so alteramos o hex 5 
RECONFIGURA_LIMITE_HEX4: LDA, R0, MEM[06]; -- vamos alterar o limite do hex 4 a partir do limite temporario imposto quando configuramos o modo am pm ou 24 hrs que ta na memoria 6
STA, R0, MEM[50];
NOP, R1, $00;
NOP, R1, $00;
CFG_MUDA_HEX5: LDA, R2, MEM[57]; -- carrega valor do hex 5
SOMA, R2, MEM[01]; -- som um no valor do hex 5
STA, R2, MEM[57]; -- bota de volta no valor do hex 5
CEQ, R2, MEM[51]; -- verifica se e igual ao limite do hex 5
JEQ, R2, .PASSOU_LIMITE_HEX5; -- se passou do limite do hex 5 vai pra reconfiguracao do hex
LDA, R2, MEM[57]; -- se nao passou do limite simplesmente bota o novo valor do hex 5 no valor do hex 5 que e sua memoria e no display do hex 5
STA, R2, DSP5;
JMP, R1, .CGF_H_VERIF_KEY1; -- volta para verifica se key 2 e pressionado de novo ou se key 1 foi pressionado. se key 1 for pressionado, acaba configuracao
PASSOU_LIMITE_HEX5: LDA, R2, MEM[00]; -- se hex 5 passou do limite botamos zero no valor da memoria do hex 4 e 5 e no display deles
STA, R2, MEM[56]; -- passando 0 pro valor do hex 4
STA, R2, DSP4; -- passando 0 pro display hex 4
STA, R2, MEM[57]; -- passando 0 pro valor do hex 5
STA, R2, DSP5; --passando 0 pro display hex 5
LDI, R0, $0A; -- passando 10 pro limite do hex 4
STA, R0, MEM[50];
JMP, R1, .CGF_H_VERIF_KEY1;
MUDA_AM: STA, R1, LIMPA3; -- Vem aqui se key3 foi pressionado
LDI, R3, $03;
CEQ, R3, MEM[51]; -- ve se o limite do hex5 esta 3
JEQ, R3, .TA_VINTE_QUATRO; -- se tiver eh porque esta no sistema vinte e quatro horas
JMP, R3, .TA_AM; -- caso contrario esta no AM PM
TA_VINTE_QUATRO: LDI, R3, $02;
STA, R3, MEM[51]; -- coloca 2 como limite do HEX5
LDI, R1, $00; -- aqui pra baixo manda 0 para todos os displays
STA, R1, DSP0;
STA, R1, DSP1;
STA, R1, DSP2;
STA, R1, DSP3;
STA, R1, DSP5;
STA, R1, MEM[52];
STA, R1, MEM[53];
STA, R1, MEM[54];
STA, R1, MEM[55];
STA, R1, MEM[57];
STA, R1, MEM[05];
LDI, R0, $03; 
STA, R0, MEM[06]; -- manda 3 para o proximo limite do HEX4
LDI, R0, $0A; 
STA, R0, MEM[50]; -- manda 10 para o limite do HEX4. HEX5,HEX4 primeiro vai ate 09, depois ate 12
LDI, R2, $01;
STA, R2, DSP4; -- coloca 1 no display 4 porque em AM PM o sistema comeca com 1
STA, R2, MEM[56];
JMP, R3, .CHECA_KEY2; -- volta a checar a key2
TA_AM: LDI, R3, $03; -- vem aqui se esta no modo AM PM
STA, R3, MEM[51]; -- Coloca 3 no limite do HEX5
LDI, R1, $00; -- aqui pra baixo manda 0 para todos os displays
STA, R1, DSP0;
STA, R1, DSP1;
STA, R1, DSP2;
STA, R1, DSP3;
STA, R1, DSP4;
STA, R1, DSP5;
STA, R1, MEM[52];
STA, R1, MEM[53];
STA, R1, MEM[54];
STA, R1, MEM[55];
STA, R1, MEM[56];
STA, R1, MEM[57];
LDI, R2, $01; -- carrega 1 no R2
STA, R2, MEM[05]; -- coloca a flag de sistema AMPM como 1
LDI, R0, $04;
STA, R0, MEM[06]; -- salva proximo limite do hex4 como 4 nessa temporaria, antes precisa ser 10
LDI, R0, $0A;
STA, R0, MEM[50]; -- poe 10 como limite de HEX4
JMP, R3, .CHECA_KEY2; -- volta a checar a key
CONFIG_DESP: STA, R1, LIMPA2; -- se a KEY2 foi pressionada vem aqui. limpamos
LDI, R3, $00;
STA, R3, LED9; -- coloca 0 no LED pra garantir que eh um novo despertador
LOOP_KEY2: LDA, R1, KEY2; -- aqui eh para analisar a cada momento se a KEY2 foi pressionada de novo, pois se foi muda o local de selecao
CEQ, R1, MEM[00];
JEQ, R1, .LOOP_KEY2; 
JMP, R1, .PEGA_HEX2; 
PEGA_HEX2: STA, R1, LIMPA2; -- Inicio da configuracao, limpa a KEY2
LDA, R1, SW0_7; -- Pega o valor em bits formado pelas chaves de 0 a 7
STA, R1, DSP2; -- passa esse valor para o HEX2 (UNIDADE dos minutos)
STA, R1, MEM[10]; -- guarda esse valor na memoria que vai ser usada depois para comparacao
VER1: LDA, R1, KEY2; -- pega o valor da key
CEQ, R1, MEM[00]; 
JEQ, R1, .VER1; -- enquanto nao for apertada fica esperando
JMP, R1, .PEGA_HEX3;
PEGA_HEX3: STA, R1, LIMPA2; -- limpa a KEY2. agora eh a configuracao do HEX3 (DEZENA nos minutos)
LDA, R1, SW0_7; -- Pega o valor em bits formado pelas chaves de 0 a 7
STA, R1, DSP3; -- guarda esse valor no HEX3 (DEZENA nos minutos)
STA, R1, MEM[11]; -- guarda esse valor na memoria que vai ser usada depois para comparacao
VER2: LDA, R1, KEY2; -- aqui vai ficar aguardando apertar a KEY2 novamente
CEQ, R1, MEM[00]; 
JEQ, R1, .VER2; 
JMP, R1, .PEGA_HEX4;
PEGA_HEX4: STA, R1, LIMPA2; -- se chegou aqui, agora vai configurar HEX4 (UNIDADE das horas)
LDA, R1, SW0_7; -- Pega o valor em bits formado pelas chaves de 0 a 7
STA, R1, DSP4; -- guarda esse valor no HEX4 (UNIDADE nos minutos)
STA, R1, MEM[12]; -- guarda esse valor na memoria que vai ser usada depois para comparacao
VER3: LDA, R1, KEY2; -- aqui vai ficar aguardando apertar a KEY2 novamente
CEQ, R1, MEM[00]; 
JEQ, R1, .VER3; 
JMP, R1, .PEGA_HEX5;
PEGA_HEX5: STA, R1, LIMPA2;  -- SE CHEGOU AQUI, vai configurar HEX5 (DEZENA das horas)
LDA, R1, SW0_7; -- Pega o valor em bits formado pelas chaves de 0 a 7
STA, R1, DSP5; -- guarda esse valor no HEX5 (DEZENA nas horas)
STA, R1, MEM[13]; -- guarda esse valor na memoria que vai ser usada depois para comparacao
VER4: LDA, R1, KEY2; -- aqui vai ficar aguardando apertar a KEY2 novamente
CEQ, R1, MEM[00]; 
JEQ, R1, .VER4; 
STA, R1, LIMPA2; -- se apertou a KEY2 novamente, eh porque a hora de despertar foi configurada
LDI, R1, $01;
STA, R1, MEM[09]; -- coloca 1 na flag se tem despertador, pois agora tem
LDA, R1, MEM[54]; 
STA, R1, DSP2;   -- aqui, le o valor que estava no HEX2 antes e coloca no HEX2 novamente
LDA, R1, MEM[55];
STA, R1, DSP3;   -- aqui, le o valor que estava no HEX2 antes e coloca no HEX3 novamente
LDA, R1, MEM[56];
STA, R1, DSP4;   -- aqui, le o valor que estava no HEX2 antes e coloca no HEX4 novamente
LDA, R1, MEM[55];
STA, R1, DSP5;   -- aqui, le o valor que estava no HEX2 antes e coloca no HEX5 novamente
JMP, R1, .LACO_PRINCIPAL; 
VERIFICA_DESP: LDA, R0, MEM[10]; -- carrega o valor a ser despertado do HEX2
CEQ, R0, MEM[54]; -- ve se o valor pra despertar esta no display
JEQ, R0, .VERIFICA_HEX3; -- se estiver. ok, vai analisar o HEX3, pois todos precisam estar
JMP, R1, .LACO_PRINCIPAL; -- se nao, volta ao laco principal
VERIFICA_HEX3: LDA, R0, MEM[11]; -- pega o valor a ser despertavel do HEX3
CEQ, R0, MEM[55]; -- ve se esse valor ja esta na tela
JEQ, R0, .VERIFICA_HEX4; -- se tiver, verifica o HEX4
JMP, R1, .LACO_PRINCIPAL;
VERIFICA_HEX4: LDA, R0, MEM[12]; -- carrega o valor a ser despertado do HEX4
CEQ, R0, MEM[56]; -- se ele ja estiver na tela, vai verificar o HEX5
JEQ, R0, .VERIFICA_HEX5;
JMP, R1, .LACO_PRINCIPAL;
VERIFICA_HEX5: LDA, R0, MEM[13];
CEQ, R0, MEM[57]; -- comparando o valor despertavel do HEX5 com o valor da tela 
JEQ, R0, .DESPERTA; -- se chegou aqui eh porque todos os valores estao iguais, entao desperta
JMP, R1, .LACO_PRINCIPAL; -- se veio aqui eh porque o HEX5 nao esta no valor ainda, volta ao laco
DESPERTA: LDI, R0, $00; -- carrega 0 no R0 para desativar a flag
STA, R0, MEM[09]; -- desativa a flag despertador
LDI, R0, $01;
STA, R0, LED9; -- liga o LED9, referenciando o despertador
JMP, R1, .LACO_PRINCIPAL;